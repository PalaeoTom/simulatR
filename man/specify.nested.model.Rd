% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/specify.nested.model.R
\name{specify.nested.model}
\alias{specify.nested.model}
\title{Specify nested model}
\usage{
specify.nested.model(s, p, m, type, variables, expression, ID = "new.model")
}
\arguments{
\item{s}{A stage object}

\item{p}{A populations object}

\item{m}{Either a model object, or a list of model objects.}

\item{type}{Either "binary" or "continuous".}

\item{variables}{A character vector containing the names of the population variables, stage variables, or NA (where there are no variables involved).}

\item{expression}{A character vector specifying the construction of the model as a single string. If m is a model, it should be called in the string via 'm'. If m is a list of models, the models should be specified by their names (names(m), or their position in the list with the prefix 'm' ('m1', 'm2', and so forth).}

\item{ID}{A character string assigning a unique ID to the model. Default is "new.model'. Note that all IDs provided will have a suffix appended denoting their level (e.g. a level-2 model with ID "m1" will be labelled "m1.2").}
}
\value{
a model object
}
\description{
Creates a model object that specifies the details of a model to be used in simulation. Used to build model objects that draw on other models as variables (i.e. nested models).
Models should be nested one level at a time. For example, if you want to nest a nested model (i.e. create a level-3 model), first you need to create the level-2 nested model,
then submit that as a variable during the creation of the level-3 model. Note that if you submit a list of models as m, these will be referred to in the model by the names provided or
in the order they appear in the list. For example, if you don't assign names to your models via names(), the first model in the list will be assigned the identifier "m1", the second "m2", and so forth.
Several core stage and simulation elements can be called by including specific strings in the 'variables' vector: 'time' calls the time elapsed between the previous time bin and
the present; 'regions' calls the 'regions' stage object (a matrix specifying region numbers); 'dimensions' the 'dimensions' stage object (a matrix specifying the area of each region);
'distances' the 'distances' stage object (a square matrix specifying the distances separating each region).
}
\examples{
#' # make stage
s <- make.stage(n.col = 5, n.row = 5, ar = 400)

add a random variable to stage
s <- add.var.stage(s, var = matrix(runif(25, min = 10, max = 50), 5, 5), var.name = "SV1")

# define population variables
PVs <- set.pop.var.seeds(min.via.pop = "off", new.var.name = "PV1", new.var.seed = function() runif(1,10,50))

# generate seed populations
p0 <- gen.seed.pops(stage = s, pop.var.seeds = PVs, n = 10)

# define model
m1 <- specify.model(s = s, p = p0, type = "binary", variables = c("SV1", "PV1"), expression = "PV1 <= SV1", ID = "m1")

# define second model
m2 <- specify.model(s = s, p = p0, type = "binary", variables = c("SV1", "PV1"), expression = "PV1 <= SV1", ID = "m2")

# get list
m.list <- list(m1, m2)

# build nested model
m3 <- specify.nested.model(s = s, p = p0, m = m.list, type = "binary", variables = c("SV1", "PV1"), expression = "PV1*m1.1 <= SV1*m2.1", ID = "m3")
}
