% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/specify.model.R
\name{specify.model}
\alias{specify.model}
\title{Specify model}
\usage{
specify.model(s, p, type, variables, expression, ID = "new.model")
}
\arguments{
\item{s}{A stage object}

\item{p}{A populations object}

\item{type}{Either "binary" or "continuous".}

\item{variables}{A character vector containing the names of the population and stage variables included in the model or NA (where there are no variables involved).}

\item{expression}{A character vector specifying the construction of the model as a single string.}

\item{ID}{A character string assigning a unique ID to the model. Default is "new.model'. Note that all IDs provided will have a suffix appended denoting their level (e.g. a level-2 model with ID "m1" will be labelled "m1.2").}
}
\value{
a model object
}
\description{
Creates a model object that specifies the details of a model to be used in simulation. Only produces level-1 models (i.e. no models can be included as variables).
Several core stage and simulation elements can be called by including specific strings in the 'variables' vector: 'time' calls the time elapsed between the previous time bin and
the present; 'regions' calls the 'regions' stage object (a matrix specifying region numbers); 'dimensions' the 'dimensions' stage object (a matrix specifying the area of each region);
'distances' the 'distances' stage object (a square matrix specifying the distances separating each region); "residents" calls the number of populations present in the region of interest.
}
\examples{
# make stage
s <- make.stage(n.col = 5, n.row = 5, ar = 400)

add a random variable to stage
s <- add.var.stage(s, var = matrix(runif(25, min = 10, max = 50), 5, 5), var.name = "SV1")

# define population variables
PVs <- set.pop.var.seeds(min.via.pop = "off", new.var.name = "PV1", new.var.seed = function() runif(1,10,50))

# generate seed populations
p0 <- gen.seed.pops(stage = s, pop.var.seeds = PVs, n = 10)

# define model
m <- specify.model(s = s, p = p0, type = "binary", variables = c("SV1", "PV1"), expression = "PV1 <= SV1", ID = "m")
}
